/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package inteligenciaartificial_pia;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.geom.Ellipse2D;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author ASUS
 */
public class EdicionGrafo extends javax.swing.JFrame {

    public static Grafo auxiliar = new Grafo();
    Grafo grafo = new Grafo();
    ArrayList<Nodo> seleccionados = new ArrayList<>();
    ArrayList<Nodo> borrados = new ArrayList<>();
    Map<String, Float> heuristica = new TreeMap<>();
    Map<String, Float> adyacentes = new TreeMap<>();
    Nodo seleccionado;
    boolean dibujar = false;
    boolean makeLine = false;
    boolean line = false;
    boolean borrar = false;
    boolean limpiar = false;
    int count = 0;

    /**
     * Creates new form EdicionGrafo
     */
    public EdicionGrafo() {
        initComponents();
        panel.setSize(500, 500);
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        Graphics2D g2 = (Graphics2D) g.create();
        for (Arista a : grafo.getAristas()) {
            g2.setColor(a.getColor());
            g2.drawString(String.valueOf(a.getTama√±o()), a.xt, a.yt);
            g2.draw(a.getArista());
        }
        for (Nodo nodo : grafo.getNodos()) {
            g2.setColor(nodo.getColor());
            g2.fill(nodo.getNodo());
            g2.setColor(Color.white);
            if (nodo.getNum() < 10) {
                g2.drawString(String.valueOf(nodo.getNum()), nodo.getNodo().getBounds().x + 7, nodo.getNodo().getBounds().y + 15);
            } else {
                g2.drawString(String.valueOf(nodo.getNum()), nodo.getNodo().getBounds().x + 3, nodo.getNodo().getBounds().y + 15);
            }
        }

        g2.dispose();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dibujarButton = new javax.swing.JToggleButton();
        EraseNodo = new javax.swing.JToggleButton();
        CleanButton = new javax.swing.JButton();
        LineButton = new javax.swing.JToggleButton();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        panel = new javax.swing.JPanel();
        tablaAdy = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        resolver = new javax.swing.JButton();
        tablaAdy1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        dibujarButton.setText("Dibujar nodo");
        dibujarButton.setFocusable(false);
        dibujarButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        dibujarButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        dibujarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dibujarButtonActionPerformed(evt);
            }
        });

        EraseNodo.setText("Borrar nodo");
        EraseNodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EraseNodoActionPerformed(evt);
            }
        });

        CleanButton.setText("Limpiar");
        CleanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CleanButtonActionPerformed(evt);
            }
        });

        LineButton.setText("Dibujar arista");
        LineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LineButtonActionPerformed(evt);
            }
        });

        jButton1.setText("Descargar imagen");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.gray, java.awt.Color.lightGray));

        panel.setBackground(new java.awt.Color(255, 255, 255));
        panel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 536, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 371, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tablaAdy.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.gray, java.awt.Color.darkGray));

        javax.swing.GroupLayout tablaAdyLayout = new javax.swing.GroupLayout(tablaAdy);
        tablaAdy.setLayout(tablaAdyLayout);
        tablaAdyLayout.setHorizontalGroup(
            tablaAdyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        tablaAdyLayout.setVerticalGroup(
            tablaAdyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel1.setText("Tabla de Adyacencia");

        resolver.setText("Resolver");
        resolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resolverActionPerformed(evt);
            }
        });

        tablaAdy1.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.gray, java.awt.Color.darkGray));

        javax.swing.GroupLayout tablaAdy1Layout = new javax.swing.GroupLayout(tablaAdy1);
        tablaAdy1.setLayout(tablaAdy1Layout);
        tablaAdy1Layout.setHorizontalGroup(
            tablaAdy1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 117, Short.MAX_VALUE)
        );
        tablaAdy1Layout.setVerticalGroup(
            tablaAdy1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 246, Short.MAX_VALUE)
        );

        jLabel2.setText("Heuristica");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(tablaAdy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(tablaAdy1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(dibujarButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(LineButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(EraseNodo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CleanButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(resolver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dibujarButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LineButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(EraseNodo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CleanButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addGap(10, 10, 10)
                        .addComponent(resolver)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tablaAdy1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tablaAdy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dibujarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dibujarButtonActionPerformed
        if (makeLine) {
            makeLine = false;
            LineButton.setSelected(false);
        } else if (borrar) {
            borrar = false;
            EraseNodo.setSelected(false);
        } else if (limpiar) {
            limpiar = false;
            CleanButton.setSelected(false);
        }
        dibujar = !dibujar;
    }//GEN-LAST:event_dibujarButtonActionPerformed

    private void CleanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CleanButtonActionPerformed
        if (dibujar) {
            dibujar = false;
            dibujarButton.setSelected(false);
        } else if (makeLine) {
            makeLine = false;
            LineButton.setSelected(false);
        } else if (borrar) {
            borrar = false;
            EraseNodo.setSelected(false);
        }
        grafo.setNodos(new ArrayList<Nodo>());
        grafo.setAristas(new ArrayList<Arista>());
        limpiar = !limpiar;
        repaint();
    }//GEN-LAST:event_CleanButtonActionPerformed

    private void LineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LineButtonActionPerformed
        if (grafo.getNodos().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "El grafo no tiene nodos.");
            LineButton.setSelected(false);
        } else {
            if (dibujar) {
                dibujar = false;
                dibujarButton.setSelected(false);
            } else if (borrar) {
                borrar = false;
                EraseNodo.setSelected(false);
            } else if (limpiar) {
                limpiar = false;
                CleanButton.setSelected(false);
            }
            desSeleccionar();
            makeLine = !makeLine;
        }
    }//GEN-LAST:event_LineButtonActionPerformed

    private void EraseNodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EraseNodoActionPerformed
        if (grafo.getNodos().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "El grafo no tiene nodos.");
            EraseNodo.setSelected(false);
        } else {
            if (dibujar) {
                dibujar = false;
                dibujarButton.setSelected(false);
            } else if (makeLine) {
                makeLine = false;
                LineButton.setSelected(false);
            } else if (limpiar) {
                limpiar = false;
                CleanButton.setSelected(false);
            }
            desSeleccionar();
            borrar = !borrar;
        }
    }//GEN-LAST:event_EraseNodoActionPerformed

    private void panelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelMouseClicked
        if (dibujar) {
            try {
                for (Nodo nodo : grafo.getNodos()) {
                    if (nodo.getNodo().contains(new Point(evt.getX() + 34, evt.getY() + 80))) {
                        throw new Error("Espacio ocupado");
                    }
                }
                int numero = 0;
                if (!grafo.getNodos().isEmpty()) {
                    if (!borrados.isEmpty()) {
                        numero = borrados.get(0).getNum();
                        borrados.remove(0);
                    } else {
                        int max = 0;
                        for (Nodo nodo : grafo.getNodos()) {
                            if (nodo.getNum() > max) {
                                max = nodo.getNum();
                            }
                        }
                        numero = max + 1;
                    }
                }
                grafo.getNodos().add(new Nodo(new Ellipse2D.Double(evt.getX() + 24, evt.getY() + 70, 20, 20), Color.black, numero));
            } catch (Error e) {
                JOptionPane.showMessageDialog(rootPane, e.getLocalizedMessage());
            }
        } else if (makeLine) {
            if (seleccionados.size() < 2) {
                Color color;
                for (Nodo nodo : grafo.getNodos()) {
                    color = nodo.getColor();
                    if (color == Color.black) {
                        color = Color.red;
                    } else {
                        color = Color.black;
                    }
                    if (nodo.getNodo().contains(new Point(evt.getX() + 34, evt.getY() + 80))) {
                        nodo.setColor(color);
                        seleccionados.add(nodo);
                    }
                }
            }
        } else if (borrar) {
            Color seleccionadoColor = Color.blue;
            for (Nodo nodo : grafo.getNodos()) {
                if (nodo.getNodo().contains(new Point(evt.getX() + 34, evt.getY() + 80))) {
                    nodo.setColor(seleccionadoColor);
                    repaint();
                    int decision = JOptionPane.showConfirmDialog(rootPane, "¬øQuiere eliminar al nodo " + nodo.getNum() + "?");
                    if (decision == 0) {
                        seleccionado = nodo;
                        break;
                    } else {
                        desSeleccionar();
                    }
                }
            }
        }
        repaint();
        if (seleccionados.size() == 2) {
            for (Arista a : grafo.getAristas()) {
                if ((a.getNodos().get(0).equals(seleccionados.get(0)) && a.getNodos().get(1).equals(seleccionados.get(1))) || (a.getNodos().get(1).equals(seleccionados.get(0)) && a.getNodos().get(0).equals(seleccionados.get(1)))) {
                    line = true;
                }
            }
            if (line) {
                JOptionPane.showMessageDialog(rootPane, "Arista repetida");
                line = false;
            } else {
                String tam = "";
                while (tam.isEmpty()) {
                    tam = JOptionPane.showInputDialog("Tama√±o de la Arista:");
                }
                if (tam != null) {
                    if (seleccionados.get(0) == seleccionados.get(1)) {
                        grafo.agregarArista2(seleccionados, tam);
                        repaint();
                    } else {
                        grafo.agregarArista(seleccionados, tam);
                        repaint();
                    }
                }
            }
            desSeleccionar();
        }
        if (seleccionado != null) {
            borrados.add(seleccionado);
            grafo.eliminarNodo(seleccionados, seleccionado);
            repaint();
            desSeleccionar();
        }
        obtenerAdyacentes();
    }//GEN-LAST:event_panelMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        auxiliar = grafo;
        Imagen i = new Imagen();
        i.setTitle("Imagen Descargada");
        i.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        i.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void resolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resolverActionPerformed
        obtenerHeuristica();
        System.out.println(heuristica);
        String inicial =  JOptionPane.showInputDialog("Nodo Inicial: ");
        String meta = JOptionPane.showInputDialog("Nodo Meta: ");
        ArrayList<String> nodos_visitados = new ArrayList<String>();
        
        float costo_acumulado = 0;
        int pos;
        int bandera;
        
        String nodo_actual = inicial;
        
        ArrayList<Nodo> nodos = grafo.getNodos();

        //Busqueda
        while (!nodo_actual.equals(meta)) {
            Map<String, Float> hijos = new TreeMap<>();
            System.out.println("Nodo actual: " + nodo_actual);
            nodos_visitados.add(nodo_actual);
            bandera = 0;
            //calculamos el costo del nodo actual, hacia sus hijos
            for (int i = 0; i < nodos.size(); i++) {

                if (nodo_actual.equals(String.valueOf(nodos.get(i).getNum()))) {
                    Iterator it = nodos.get(i).getAdyacentes().keySet().iterator();
                    while (it.hasNext()) {
                        //nombre del nodo adyacente
                        float cant_hijos;
                        String key = it.next().toString();
                        if (nodos_visitados.contains(key) == false) {
                            cant_hijos = costo_acumulado + nodos.get(i).getAdyacentes().get(key) + heuristica.get(key);
                            hijos.put(key, cant_hijos);
                        }
                    }
                }
            }
            Iterator c = hijos.keySet().iterator();
            String auxKey = c.next().toString();
            float auxCost = hijos.get(auxKey);
            Iterator b = hijos.keySet().iterator();
            while (b.hasNext()) {
                String key = b.next().toString();
                if (hijos.get(key) <= auxCost) {
                    auxKey = "";
                    auxKey = key;
                    auxCost = hijos.get(key);
                }
            }
            costo_acumulado = hijos.get(auxKey) - heuristica.get(auxKey);
            nodo_actual = auxKey;
            System.out.println("    Costo: " + (hijos.get(auxKey) - heuristica.get(auxKey)));

        }
        System.out.println("Costo TOTAL: " + costo_acumulado);
        nodos_visitados.add(meta);
        colorearNodos(nodos_visitados);
    }//GEN-LAST:event_resolverActionPerformed

    public void desSeleccionar() {
        seleccionados = new ArrayList<>();
        seleccionado = null;
        for (Nodo n : grafo.getNodos()) {
            n.setColor(Color.black);
        }
        repaint();
    }

    public void obtenerAdyacentes() {
        for (Nodo nodo : grafo.getNodos()) {
            for (Arista a : grafo.getAristas()) {
                if (a.getNodos().get(0).equals(nodo)) {
                    adyacentes.put(String.valueOf(a.getNodos().get(1).getNum()), Float.valueOf(a.getTama√±o()));
                } else if (a.getNodos().get(1).equals(nodo)) {
                    adyacentes.put(String.valueOf(a.getNodos().get(0).getNum()), Float.valueOf(a.getTama√±o()));
                }
            }
            nodo.setAdyacentes(adyacentes);
            adyacentes = new TreeMap<>();
        }
    }
    
    public void obtenerHeuristica(){
        //Resolver por medio del algoritmo A*
        for( Nodo nodo: grafo.getNodos()){
            String costo = JOptionPane.showInputDialog(rootPane, "Ingrese la heuristica del Nodo " + nodo.getNum() + ":");
            heuristica.put(String.valueOf(nodo.getNum()), Float.valueOf(costo));
        }
        System.out.println(heuristica);
    }
    
    public void colorearNodos(ArrayList<String> visitados){
        for(String visitado: visitados){
            for(Nodo nodo: grafo.getNodos()){
                if(String.valueOf(nodo.getNum()).equals(visitado)){
                    nodo.setColor(Color.RED);
                }
            }
        }
        repaint();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EdicionGrafo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EdicionGrafo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EdicionGrafo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EdicionGrafo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EdicionGrafo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CleanButton;
    private javax.swing.JToggleButton EraseNodo;
    private javax.swing.JToggleButton LineButton;
    private javax.swing.JToggleButton dibujarButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel panel;
    private javax.swing.JButton resolver;
    private javax.swing.JPanel tablaAdy;
    private javax.swing.JPanel tablaAdy1;
    // End of variables declaration//GEN-END:variables
}
